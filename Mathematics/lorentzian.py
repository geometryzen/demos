'''
UNDER CONSTRUCTION
Lorentzian is a Geometric Algebra multivector (quantity) with a metric that is Lorentzian.
'''
from lorentz import *

# The following functions are provided for testing purposes.
def assertEqual(actual, expect):
    if expect == actual:
        pass
    else:
        print {"actual": actual, "expect": expect}

def assertTrue(actual):
    return assertEqual(actual, True)

def assertFalse(actual):
    return assertEqual(actual, False)

def explain(m):
    print str(m) + " is " + repr(m)
    return m

def showValue(name, m):
    print name + " => " + str(m)
    return m

def isCloseTo(actual, expect):
    epsilon = 1e-10
    error = actual - expect
    quadrance = error % error
    return sqrt(quadrance) < epsilon

A = Lorentzian(0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF)

assertEqual(A.w,     0x0)
assertEqual(A.x,     0x1)
assertEqual(A.y,     0x2)
assertEqual(A.xy,   +0x3)
assertEqual(A.yx,   -0x3)
assertEqual(A.z,     0x4)
assertEqual(A.xz,   +0x5)
assertEqual(A.zx,   -0x5)
assertEqual(A.yz,   +0x6)
assertEqual(A.zy,   -0x6)
assertEqual(A.xyz,  +0x7)
assertEqual(A.t,     0x8)
assertEqual(A.xt,   +0x9)
assertEqual(A.tx,   -0x9)
assertEqual(A.yt,   +0xA)
assertEqual(A.ty,   -0xA)
assertEqual(A.xyt,  +0xB)
assertEqual(A.zt,   +0xC)
assertEqual(A.tz,   -0xC)
assertEqual(A.xzt,  +0xD)
assertEqual(A.zxt,  -0xD)
assertEqual(A.yzt,  +0xE)
assertEqual(A.xyzt, +0xF)

B = VectorL4(0x1, 0x2, 0x4, 0x8)

assertEqual(B.w, 0x0)
assertEqual(B.x, 0x1)
assertEqual(B.y, 0x2)
assertEqual(B.z, 0x4)
assertEqual(B.t, 0x8)

A = VectorL4(2, 3, 5, 7)
B = VectorL4(11,13,17,19)
C = A + B
assertEqual(C.w, 0)
assertEqual(C.x, 13)
assertEqual(C.y, 16)
assertEqual(C.z, 22)
assertEqual(C.t, 26)

C = A + 5
assertEqual(C.w, 5)
assertEqual(C.x, 2)
assertEqual(C.y, 3)
assertEqual(C.z, 5)
assertEqual(C.t, 7)

C = 5 + A
assertEqual(C.w, 5)
assertEqual(C.x, 2)
assertEqual(C.y, 3)
assertEqual(C.z, 5)
assertEqual(C.t, 7)

five = ScalarL4(5)

C = A + five
assertEqual(C.w, 5)
assertEqual(C.x, 2)
assertEqual(C.y, 3)
assertEqual(C.z, 5)
assertEqual(C.t, 7)

C = five + A
assertEqual(C.w, 5)
assertEqual(C.x, 2)
assertEqual(C.y, 3)
assertEqual(C.z, 5)
assertEqual(C.t, 7)

X = VectorL4(3, 4, 12, 13)
assertEqual(X.quadrance(), 0)

A = Lorentzian(0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF)
assertEqual(A, A)

A = Lorentzian(2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
B = Lorentzian(3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
C = A * B
assertEqual(C.w,    6)
assertEqual(C.x,    0)
assertEqual(C.y,    0)
assertEqual(C.xy,   0)
assertEqual(C.z,    0)
assertEqual(C.xz,   0)
assertEqual(C.yz,   0)
assertEqual(C.xyz,  0)
assertEqual(C.t,    0)
assertEqual(C.xt,   0)
assertEqual(C.yt,   0)
assertEqual(C.xyt,  0)
assertEqual(C.zt,   0)
assertEqual(C.xzt,  0)
assertEqual(C.yzt,  0)
assertEqual(C.xyzt, 0)

A = Lorentzian(0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
B = Lorentzian(0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
C = A * B
assertEqual(C.w,    6)
assertEqual(C.x,    0)
assertEqual(C.y,    0)
assertEqual(C.xy,   0)
assertEqual(C.z,    0)
assertEqual(C.xz,   0)
assertEqual(C.yz,   0)
assertEqual(C.xyz,  0)
assertEqual(C.t,    0)
assertEqual(C.xt,   0)
assertEqual(C.yt,   0)
assertEqual(C.xyt,  0)
assertEqual(C.zt,   0)
assertEqual(C.xzt,  0)
assertEqual(C.yzt,  0)
assertEqual(C.xyzt, 0)

A = Lorentzian(0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0)
B = Lorentzian(0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0)
C = A * B
assertEqual(C.w,    6)
assertEqual(C.x,    0)
assertEqual(C.y,    0)
assertEqual(C.xy,   0)
assertEqual(C.z,    0)
assertEqual(C.xz,   0)
assertEqual(C.yz,   0)
assertEqual(C.xyz,  0)
assertEqual(C.t,    0)
assertEqual(C.xt,   0)
assertEqual(C.yt,   0)
assertEqual(C.xyt,  0)
assertEqual(C.zt,   0)
assertEqual(C.xzt,  0)
assertEqual(C.yzt,  0)
assertEqual(C.xyzt, 0)

A = Lorentzian(0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0)
B = Lorentzian(0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0)
C = A * B
assertEqual(C.w,   -6)
assertEqual(C.x,    0)
assertEqual(C.y,    0)
assertEqual(C.xy,   0)
assertEqual(C.z,    0)
assertEqual(C.xz,   0)
assertEqual(C.yz,   0)
assertEqual(C.xyz,  0)
assertEqual(C.t,    0)
assertEqual(C.xt,   0)
assertEqual(C.yt,   0)
assertEqual(C.xyt,  0)
assertEqual(C.zt,   0)
assertEqual(C.xzt,  0)
assertEqual(C.yzt,  0)
assertEqual(C.xyzt, 0)

A = Lorentzian(0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0)
B = Lorentzian(0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0)
C = A * B
assertEqual(C.w,    6)
assertEqual(C.x,    0)
assertEqual(C.y,    0)
assertEqual(C.xy,   0)
assertEqual(C.z,    0)
assertEqual(C.xz,   0)
assertEqual(C.yz,   0)
assertEqual(C.xyz,  0)
assertEqual(C.t,    0)
assertEqual(C.xt,   0)
assertEqual(C.yt,   0)
assertEqual(C.xyt,  0)
assertEqual(C.zt,   0)
assertEqual(C.xzt,  0)
assertEqual(C.yzt,  0)
assertEqual(C.xyzt, 0)

A = Lorentzian(0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0)
B = Lorentzian(0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0)
C = A * B
assertEqual(C.w,    -6)
assertEqual(C.x,    0)
assertEqual(C.y,    0)
assertEqual(C.xy,   0)
assertEqual(C.z,    0)
assertEqual(C.xz,   0)
assertEqual(C.yz,   0)
assertEqual(C.xyz,  0)
assertEqual(C.t,    0)
assertEqual(C.xt,   0)
assertEqual(C.yt,   0)
assertEqual(C.xyt,  0)
assertEqual(C.zt,   0)
assertEqual(C.xzt,  0)
assertEqual(C.yzt,  0)
assertEqual(C.xyzt, 0)

A = Lorentzian(0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0)
B = Lorentzian(0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0)
C = A * B
assertEqual(C.w,    -6)
assertEqual(C.x,    0)
assertEqual(C.y,    0)
assertEqual(C.xy,   0)
assertEqual(C.z,    0)
assertEqual(C.xz,   0)
assertEqual(C.yz,   0)
assertEqual(C.xyz,  0)
assertEqual(C.t,    0)
assertEqual(C.xt,   0)
assertEqual(C.yt,   0)
assertEqual(C.xyt,  0)
assertEqual(C.zt,   0)
assertEqual(C.xzt,  0)
assertEqual(C.yzt,  0)
assertEqual(C.xyzt, 0)

A = Lorentzian(0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0)
B = Lorentzian(0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0)
C = A * B
assertEqual(C.w,    -6)
assertEqual(C.x,    0)
assertEqual(C.y,    0)
assertEqual(C.xy,   0)
assertEqual(C.z,    0)
assertEqual(C.xz,   0)
assertEqual(C.yz,   0)
assertEqual(C.xyz,  0)
assertEqual(C.t,    0)
assertEqual(C.xt,   0)
assertEqual(C.yt,   0)
assertEqual(C.xyt,  0)
assertEqual(C.zt,   0)
assertEqual(C.xzt,  0)
assertEqual(C.yzt,  0)
assertEqual(C.xyzt, 0)

A = Lorentzian(0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0)
B = Lorentzian(0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0)
C = A * B
assertEqual(C.w,    6)
assertEqual(C.x,    0)
assertEqual(C.y,    0)
assertEqual(C.xy,   0)
assertEqual(C.z,    0)
assertEqual(C.xz,   0)
assertEqual(C.yz,   0)
assertEqual(C.xyz,  0)
assertEqual(C.t,    0)
assertEqual(C.xt,   0)
assertEqual(C.yt,   0)
assertEqual(C.xyt,  0)
assertEqual(C.zt,   0)
assertEqual(C.xzt,  0)
assertEqual(C.yzt,  0)
assertEqual(C.xyzt, 0)

A = Lorentzian(0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0)
B = Lorentzian(0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0)
C = A * B
assertEqual(C.w,    -6)
assertEqual(C.x,    0)
assertEqual(C.y,    0)
assertEqual(C.xy,   0)
assertEqual(C.z,    0)
assertEqual(C.xz,   0)
assertEqual(C.yz,   0)
assertEqual(C.xyz,  0)
assertEqual(C.t,    0)
assertEqual(C.xt,   0)
assertEqual(C.yt,   0)
assertEqual(C.xyt,  0)
assertEqual(C.zt,   0)
assertEqual(C.xzt,  0)
assertEqual(C.yzt,  0)
assertEqual(C.xyzt, 0)

A = Lorentzian(0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0)
B = Lorentzian(0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0)
C = A * B
assertEqual(C.w,    -6)
assertEqual(C.x,    0)
assertEqual(C.y,    0)
assertEqual(C.xy,   0)
assertEqual(C.z,    0)
assertEqual(C.xz,   0)
assertEqual(C.yz,   0)
assertEqual(C.xyz,  0)
assertEqual(C.t,    0)
assertEqual(C.xt,   0)
assertEqual(C.yt,   0)
assertEqual(C.xyt,  0)
assertEqual(C.zt,   0)
assertEqual(C.xzt,  0)
assertEqual(C.yzt,  0)
assertEqual(C.xyzt, 0)

A = Lorentzian(0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0)
B = Lorentzian(0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0)
C = A * B
assertEqual(C.w,    6)
assertEqual(C.x,    0)
assertEqual(C.y,    0)
assertEqual(C.xy,   0)
assertEqual(C.z,    0)
assertEqual(C.xz,   0)
assertEqual(C.yz,   0)
assertEqual(C.xyz,  0)
assertEqual(C.t,    0)
assertEqual(C.xt,   0)
assertEqual(C.yt,   0)
assertEqual(C.xyt,  0)
assertEqual(C.zt,   0)
assertEqual(C.xzt,  0)
assertEqual(C.yzt,  0)
assertEqual(C.xyzt, 0)

A = Lorentzian(0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0)
B = Lorentzian(0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0)
C = A * B
assertEqual(C.w,    -6)
assertEqual(C.x,    0)
assertEqual(C.y,    0)
assertEqual(C.xy,   0)
assertEqual(C.z,    0)
assertEqual(C.xz,   0)
assertEqual(C.yz,   0)
assertEqual(C.xyz,  0)
assertEqual(C.t,    0)
assertEqual(C.xt,   0)
assertEqual(C.yt,   0)
assertEqual(C.xyt,  0)
assertEqual(C.zt,   0)
assertEqual(C.xzt,  0)
assertEqual(C.yzt,  0)
assertEqual(C.xyzt, 0)

A = Lorentzian(0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0)
B = Lorentzian(0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0)
C = A * B
assertEqual(C.w,    6)
assertEqual(C.x,    0)
assertEqual(C.y,    0)
assertEqual(C.xy,   0)
assertEqual(C.z,    0)
assertEqual(C.xz,   0)
assertEqual(C.yz,   0)
assertEqual(C.xyz,  0)
assertEqual(C.t,    0)
assertEqual(C.xt,   0)
assertEqual(C.yt,   0)
assertEqual(C.xyt,  0)
assertEqual(C.zt,   0)
assertEqual(C.xzt,  0)
assertEqual(C.yzt,  0)
assertEqual(C.xyzt, 0)

A = Lorentzian(0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0)
B = Lorentzian(0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0)
C = A * B
assertEqual(C.w,    6)
assertEqual(C.x,    0)
assertEqual(C.y,    0)
assertEqual(C.xy,   0)
assertEqual(C.z,    0)
assertEqual(C.xz,   0)
assertEqual(C.yz,   0)
assertEqual(C.xyz,  0)
assertEqual(C.t,    0)

assertEqual(C.yt,   0)
assertEqual(C.xyt,  0)
assertEqual(C.zt,   0)
assertEqual(C.xzt,  0)
assertEqual(C.yzt,  0)
assertEqual(C.xyzt, 0)

A = Lorentzian(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2)
B = Lorentzian(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3)
C = A * B
assertEqual(C.w,    -6)
assertEqual(C.x,    0)
assertEqual(C.y,    0)
assertEqual(C.xy,   0)
assertEqual(C.z,    0)
assertEqual(C.xz,   0)
assertEqual(C.yz,   0)
assertEqual(C.xyz,  0)
assertEqual(C.t,    0)
assertEqual(C.xt,   0)
assertEqual(C.yt,   0)
assertEqual(C.xyt,  0)
assertEqual(C.zt,   0)
assertEqual(C.xzt,  0)
assertEqual(C.yzt,  0)
assertEqual(C.xyzt, 0)

A = Lorentzian(2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
B = Lorentzian(0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
C = A * B
assertEqual(C.w,    0)
assertEqual(C.x,    6)
assertEqual(C.y,    0)
assertEqual(C.xy,   0)
assertEqual(C.z,    0)
assertEqual(C.xz,   0)
assertEqual(C.yz,   0)
assertEqual(C.xyz,  0)
assertEqual(C.t,    0)
assertEqual(C.xt,   0)
assertEqual(C.yt,   0)
assertEqual(C.xyt,  0)
assertEqual(C.zt,   0)
assertEqual(C.xzt,  0)
assertEqual(C.yzt,  0)
assertEqual(C.xyzt, 0)

print "Done!"

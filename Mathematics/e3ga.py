# Demonstration of the Geometric Algebra generated by a Euclidean 3D vector space.
from e3ga import *

def explain(m):
    print str(m) + " is " + repr(m)
    return m

def showValue(name, m):
    print name + " => " + str(m)
    return m

zero = explain(Euclidean3(0, 0, 0, 0, 0, 0, 0, 0, False))
one  = explain(ScalarE3(1, False))
two  = explain(ScalarE3(2, False))
three= explain(ScalarE3(3, False))
e1   = explain(VectorE3(1.0, 0.0, 0.0, False))
e2   = explain(VectorE3(0.0, 1.0, 0.0, False))
e3   = explain(VectorE3(0.0, 0.0, 1.0, False))
e12  = explain(BivectorE3(1, 0, 0, False))
e23  = explain(BivectorE3(0, 1, 0, False))
e31  = explain(BivectorE3(0, 0, 1, False))
I    = explain(PseudoscalarE3(1, False))

blades = [zero, one, two, e1, e2, e3, e12, e23, e31, I]

# Skulpt bug? The string representation of the list does not recurse.
# print str(blades)

# addition uses the + operator, as you would expect.
sum = showValue("sum", one + e1 + e2 + e3 + e12 + e23 + e31 + I)

# grade extraction is performed using Python's indexing operator [].
print ""
print "Grade extraction operator []"
print "============================"
for grade in range(0, 4):
    showValue("sum[" + str(grade) + "]", sum[grade])

# subtraction uses the - operator, as you would expect.
showValue("zero + sum", zero + sum)
showValue("0    + sum", 0 + sum)
showValue("zero - sum", zero - sum)
showValue("0    - sum", 0 - sum)
showValue("one  * sum", one * sum)
showValue("1    * sum", 1.0 * sum)
showValue("one  ^ sum", one ^ sum)
showValue("1    ^ sum", 1 ^ sum)
print ""
print "Geometric Product Table *"
print "========================="
for a in blades:
    for b in blades:
        showValue(str(a) + " * " + str(b), a * b)
    print ""
print ""
print "Exterior Product Table *"
print "========================="
for a in blades:
    for b in blades:
        showValue(str(a) + " ^ " + str(b), a ^ b)
    print ""
print ""
print "Left Contraction Product Table <<"
print "================================="
for a in blades:
    for b in blades:
        showValue(str(a) + " << " + str(b), a << b)
    print ""
    print ""
print "Right Contraction Product Table >>"
print "=================================="
for a in blades:
    for b in blades:
        showValue(str(a) + " >> " + str(b), a >> b)
    print ""
print ""
print "Scalar Product Table %"
print "=================================="
for a in blades:
    for b in blades:
        showValue(str(a) + " % " + str(b), a % b)
    print ""
print "Cross Product Table"
print "=================================="
for a in blades:
    for b in blades:
        showValue(str(a) + ".cross(" + str(b) + ")", a.cross(b))
    print ""
